 /*
  * var thingStatusInfo = getThingStatusInfo("zwave:device:c5155aa4:node2")

if ((thingStatusInfo != null) && (thingStatusInfo.getStatus().toString() == "ONLINE")) {
    logInfo("ThingStatus", "The thing is online.")
} else {
    logError("ThingStatus", "The thing is offline or doesn't exist.")
}
  * 
  */
//
var String vRadioONEPlayListTmp = "NDR 2 (Pop)"
var Number vRadioONEPlayListTmpNum = 1
var Timer vTimerSonosONEOnOff = null
var Timer vTimerSonosSnoozeONE = null
var int vSnoozeTimeTmp = 1
var int vSonosVolume = 5
/*
var Timer vTimerSonosONEOnOff = null
var Timer vTimerSonosSnoozeONE = null
var int vSnoozeTimeTmp = 1
/* 
 * rules
 */  
rule "Sonos: Initialisierung"
when
	System started
then
	//vSonosVolume.postUpdate(4)
	// ONE
	//vSonosONEPlayRadio.postUpdate(1)
	//vSonosONEPlayList.postUpdate(1)
end
/*
rule "Sonos An/Aus"
when
	Item vSonosOnOff received command
then
	logDebug("Sonos","------ vSonosOnOff ----------")
	if (vSonosOnOff.state == ON) {
		dPlugSwitch_EZ.sendCommand(ON)
		dPlugSwitch_WZ.sendCommand(ON)
		dPlugSwitch_BZ.sendCommand(ON)
		dPlugSwitch_SZ.sendCommand(ON)			
	}
	if (vSonosOnOff.state == OFF) {
		dPlugSwitch_EZ.sendCommand(OFF)
		dPlugSwitch_WZ.sendCommand(OFF)
		dPlugSwitch_BZ.sendCommand(OFF)
		dPlugSwitch_SZ.sendCommand(OFF)
	}
end
*/
//
/*
rule "vSonosPlayRadio"
when
	Item vSonosPlayRadio received command
then
	logDebug("Sonos","------ vSonosPlayRadio ----------")
	if (vSonosActivePlayer.state == "Schlafzimmer") {
		switch(receivedCommand) {
			case 1 : dSonosPLAY11PlayRadio.sendCommand("NDR 2 (Pop)")
			case 2 : dSonosPLAY11PlayRadio.sendCommand("NDR Info 98.5 (Community)")
			case 3 : dSonosPLAY11PlayRadio.sendCommand("Deutschlandfunk 106.1 (Nationale Nachrichten)")
			case 4 : dSonosPLAY11PlayRadio.sendCommand("radio ffn 101.9 (Hot AC)")
			case 5 : dSonosPLAY11PlayRadio.sendCommand("N-JOY 92.6 (Top 40 Hits)")
			case 6 : dSonosPLAY11PlayRadio.sendCommand("Radio 21 87.7 (Classic Rock)")
			case 7 : dSonosPLAY11PlayRadio.sendCommand("Bayern 3 97.3 (Hot AC)")
			case 8 : dSonosPLAY11PlayRadio.sendCommand("ARD Das Erste")
			case 9 : dSonosPLAY11PlayRadio.sendCommand("Coolradio 1 (Classic Rock)")
			case 10 : dSonosPLAY11PlayRadio.sendCommand("BBC Radio 5 live 909 (Sport Talk & Nachrichten)")		
		}		
	}
	if (vSonosActivePlayer.state == "Bad") {
		switch(receivedCommand) {
			case 1 : dSonosPLAY12PlayRadio.sendCommand("NDR 2 (Pop)")
			case 2 : dSonosPLAY12PlayRadio.sendCommand("NDR Info 98.5 (Community)")
			case 3 : dSonosPLAY12PlayRadio.sendCommand("Deutschlandfunk 106.1 (Nationale Nachrichten)")
			case 4 : dSonosPLAY12PlayRadio.sendCommand("radio ffn 101.9 (Hot AC)")
			case 5 : dSonosPLAY12PlayRadio.sendCommand("N-JOY 92.6 (Top 40 Hits)")
			case 6 : dSonosPLAY12PlayRadio.sendCommand("Radio 21 87.7 (Classic Rock)")
			case 7 : dSonosPLAY12PlayRadio.sendCommand("Bayern 3 97.3 (Hot AC)")
			case 8 : dSonosPLAY12PlayRadio.sendCommand("ARD Das Erste")
			case 9 : dSonosPLAY12PlayRadio.sendCommand("Coolradio 1 (Classic Rock)")
			case 10 : dSonosPLAY12PlayRadio.sendCommand("BBC Radio 5 live 909 (Sport Talk & Nachrichten)")		
		}		
*/
/*
rule "vSonosControler"
when
	Item vSonosControler received command
then
	logDebug("Sonos","------ vSonosControler  ----------")
	var vControllerTmp = vSonosControler.state.toString
	logDebug("Sonos",vControllerTmp)
	if (vSonosActivePlayer.state == "Schlafzimmer") {
		logDebug("Sonos","------ vSonosControler Schlafzimmer ----------")
		dSonosPLAY11Controler.sendCommand(vControllerTmp)
	}
	if (vSonosActivePlayer.state == "Bad") {
		logDebug("Sonos","------ vSonosControler Bad ----------")
		dSonosPLAY12Controler.sendCommand(vControllerTmp)
	}
	if (vSonosActivePlayer.state == "Wohnzimmer") {
		logDebug("Sonos","------ vSonosControler Wohnzimmer ----------")
		dSonosCONNECTControler.sendCommand(vControllerTmp)
	}
end	
*/
/*
rule "vSonosSnoozeONE"
when
	// switch for WallMot and HabPanel
	Item vSonosSnoozeONE received command
then
	if(receivedCommand == ON) {
		logDebug("Sonos","------ Snooze Start ONE ----------")
		if (dSonosONEMute.state == OFF) {
			dSonosONEMute.sendCommand(ON)			
		}
		// first ON command, so create a timer to switch on sonos
		logDebug("Sonos","------ Snooze Start Timer ONE ----------")
		if(vTimerSonosSnoozeONE === null) {     									
			vSnoozeTimeTmp = (vSonosSnoozeTimeONE.state as DecimalType).intValue
			vTimerSonosSnoozeONE = createTimer(now.plusMinutes(vSnoozeTimeTmp)) [|
				logDebug("Sonos","------ Snooze trigger execution ONE ----------")
				dSonosONEMute.sendCommand(OFF)
				vSonosMute.postUpdate(OFF)
				vSonosSnoozeONE.postUpdate(OFF)
			]
		} 
		else {
			// log:set DEBUG org.eclipse.smarthome.model.script.Sonos
			// subsequent ON command, so reschedule the existing timer
			logDebug("Sonos","------ Snooze reschedule ONE ----------")
			vTimerSonosSnoozeONE.reschedule(now.plusMinutes(vSnoozeTimeTmp)) 
		}
	}	
	else if(receivedCommand == OFF) {
		logDebug("Sonos","------ Snooze AUS ONE ----------")
		// remove any previously scheduled timer
		if(vTimerSonosSnoozeONE !== null) {
			vTimerSonosSnoozeONE.cancel
			vTimerSonosSnoozeONE = null
		}
		dSonosONEMute.sendCommand(OFF)
		vSonosMute.postUpdate(OFF)
		vSonosSnoozeONE.postUpdate(OFF)			
	}
	logDebug("Sonos","------ Snooze ONE rule finished ----------")
end
*/